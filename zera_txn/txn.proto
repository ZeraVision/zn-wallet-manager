syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

package zera_txn;

option go_package = "./grpc/protobuf";

option optimize_for = SPEED;

service TXNService{
    rpc Coin(CoinTXN) returns (google.protobuf.Empty);
    rpc Mint(MintTXN) returns (google.protobuf.Empty);
    rpc ItemMint(ItemizedMintTXN) returns (google.protobuf.Empty);
    rpc Contract(InstrumentContract) returns (google.protobuf.Empty); 
    rpc GovernProposal(GovernanceProposal) returns (google.protobuf.Empty);
    rpc GovernVote(GovernanceVote) returns (google.protobuf.Empty);
    rpc SmartContract(SmartContractTXN) returns (google.protobuf.Empty);
    rpc SmartContractExecute(SmartContractExecuteTXN) returns (google.protobuf.Empty);
    rpc SmartContractInstantiate(SmartContractInstantiateTXN) returns (google.protobuf.Empty);
    rpc CurrencyEquiv(SelfCurrencyEquiv) returns (google.protobuf.Empty);
    rpc AuthCurrencyEquiv(AuthorizedCurrencyEquiv) returns (google.protobuf.Empty);
    rpc ExpenseRatio(ExpenseRatioTXN) returns (google.protobuf.Empty); //TODO - change to stream
    rpc NFT(NFTTXN) returns (google.protobuf.Empty);
    rpc ContractUpdate(ContractUpdateTXN) returns (google.protobuf.Empty); 
    rpc Foundation(FoundationTXN) returns (google.protobuf.Empty);
    rpc DelegatedVoting(DelegatedVotingTXN) returns (google.protobuf.Empty);
    rpc Quash(QuashTXN) returns (google.protobuf.Empty);
    rpc FastQuorum(FastQuorumTXN) returns (google.protobuf.Empty);
    rpc Revoke(RevokeTXN) returns (google.protobuf.Empty);
    rpc Compliance(ComplianceTXN) returns (google.protobuf.Empty);
    rpc BurnSBT(BurnSBTTXN) returns (google.protobuf.Empty);

}

enum TXN_STATUS{
    OK = 0;
    INVALID_PARAMETERS = 1;
    INSUFFICIENT_AMOUNT = 2;
    INSUFFICIENT_CONTRACT_FEES = 3;
    AUTHORIZED_INSUFFICIENT_FEES = 4;
    AUTHORIZED_INSUFFICIENT_CONTRACT_FEES = 5;
    INVALID_CONTRACT = 6;
    INVALID_AUTH_KEY = 7;
    INVALID_WALLET_ADDRESS = 8;
    INVALID_MULTI_TRANSACTION = 9;
    INVALID_CONTRACT_PARAMETERS = 10;
    INVALID_CONTRACT_FEE_ID = 11;
    INVALID_UINT256 = 12;
    EXCEEDED_MAX_SUPPLY = 13;
    INVALID_NFT = 14;
    NFT_OWNERSHIP = 15;
    VALIDATOR_ADDRESS = 16;
    CONTRACT_HAS_NO_GOVERNANCE = 17;
    INVALID_BASE_FEE_ID = 18;
    EXPENSE_RATIO_DUPLICATE = 19;
    RESTRICTED_SYMBOL = 20;
    INVALID_PROPOSAL_ID = 21;
    PROPOSAL_NOT_IN_VOTING_PERIOD = 22;
    TIME_DELAY_INITIALIZED = 23;
    INVALID_TXN_HASH = 24;
    INVALID_TXN_TYPE = 25;
    TIME_DELAY_EXPIRED = 26;
    DUPLICATE_AUTH_KEY = 27;
    KEY_WEIGHT_TOO_LOW = 28;
    INVALID_ITEM = 29;
    INVALID_PROPOSAL = 30;
    PROPOSAL_DOES_NOT_BELONG_TO_SENDER = 31;
    INVALID_ADDRESS = 32;
    NO_CHANGE_TO_COMPLIANCE = 33;
    COMPLIANCE_CHECK_FAILED = 34;
    INVALID_SAFE_SEND = 35;
    INVALID_TXN_DATA = 36;
}
enum TRANSACTION_TYPE
{
    COIN_TYPE = 0;
    FOUNDATION_TYPE = 2;
    MINT_TYPE = 1;
    ITEM_MINT_TYPE = 3;
    CONTRACT_TXN_TYPE = 4;
    VOTE_TYPE = 5;
    PROPOSAL_TYPE = 6;
    SMART_CONTRACT_TYPE = 7;
    SMART_CONTRACT_EXECUTE_TYPE = 8;
    SELF_CURRENCY_EQUIV_TYPE = 9;
    AUTHORIZED_CURRENCY_EQUIV_TYPE = 10;
    EXPENSE_RATIO_TYPE = 11;
    NFT_TYPE = 12;
    UPDATE_CONTRACT_TYPE = 13;
    VALIDATOR_REGISTRATION_TYPE = 14;
    VALIDATOR_HEARTBEAT_TYPE = 15;
    PROPOSAL_RESULT_TYPE = 16;
    DELEGATED_VOTING_TYPE = 17;
    REVOKE_TYPE = 18;
    QUASH_TYPE = 19;
    FAST_QUORUM_TYPE = 20;
    COMPLIANCE_TYPE = 21;
    SBT_BURN_TYPE = 22;
    REQUIRED_VERSION = 23;
    SMART_CONTRACT_INSTANTIATE_TYPE = 24;
    UKNOWN_TYPE = 25;
}
//ENUMS
enum LANGUAGE{
    CPLUSPLUS = 0;
    RUST = 1;
    PYTHON = 2;
    JAVASCRIPT = 3;
}

enum PROPOSAL_PERIOD{
    DAYS = 0;
    MONTHS = 1;
}

enum VARIABLE_TYPE{
    INT = 0;
    SHORT = 1;
    LONG = 2;
    LONG_LONG = 3;
    BOOL = 4;
    STRING = 5;
}
//SUB MESSAGES
enum CONTRACT_FEE_TYPE{
    FIXED = 0;
    CUR_EQUIVALENT = 1;
    PERCENTAGE= 2;
}
enum GOVERNANCE_TYPE{
    STAGED = 0;    //Multiple stages of governance, must pass regular quorum to get to next stage. Up to 99 stages specified by contract creator (in days)
    CYCLE = 1;     //1 specified voting stage based on days repeat this process once the cycle is complete (in days)
    STAGGERED = 2; //Every proposal has the same voting period length and starts when proposal is made (in days)
    ADAPTIVE = 3;  //Every proposal has its own specified voting period (in days)
    REMOVE = 4;
}
enum CONTRACT_TYPE{
    TOKEN = 0;
    NFT = 1;
    SBT = 2;
}
message DelegateContract{
    int32 priority= 1;
    string contract_id = 2;
}
message DelegatedVotingTXN{
    BaseTXN base = 1;
    repeated DelegateVote delegate_votes = 2;
    repeated DelegateFees delegate_fees = 3;
}
message DelegateVote{
    bytes address = 1;
    repeated DelegateContract contracts = 2;
}
message DelegateFees{
    string contract_id = 1;
    string auth_amount = 2;
}
message Compliance{
    string contract_id = 1;
    uint32 compliance_level = 2;
}
message TokenCompliance{
    repeated Compliance compliance = 1;
}
//trade in for maps
message ExpenseRatio{
    uint32 day = 1;
    uint32 month = 2;
    uint32 percent = 3; //100 = 100%??
}
message KeyValuePair{
    string key = 1;
    string value = 2;
}
message ByteMultiplier{
    TRANSACTION_TYPE txn_type = 1;
    string multiplier = 2;
}
message FoundationTXN{
    BaseTXN base = 1;
    repeated string restricted_symbols = 2;
    repeated ByteMultiplier byte_multiplier = 3;
    optional string fee_ISO4217 = 4;
}
message RevokeTXN{
    BaseTXN base = 1;
    string contract_id = 2;
    bytes recipient_address = 3;
    string item_id = 4;
}
message FastQuorumTXN{
    BaseTXN base = 1;
    bytes proposal_id = 2;
}
message Governance{
    GOVERNANCE_TYPE type = 1;              //read GOVERNANCE_TYPE above
    uint32 regular_quorum = 2;             //percent of yes votes to pass at the end of cycle (still needs to pass threshhold) 10000 = 100&
    optional uint32 fast_quorum = 3;       //Percent of yes votes to instantly pass (% based off circulating supply) 10000 = 100%
    repeated string voting_instrument = 4; //which voting instruments are allowed to vote in this contract - this does effect fast_quorum and threshold
    uint32 threshold = 5;                  //threshold of participation of holders needed to be accepted 1000 = 100%
    optional bool chicken_dinner = 6;      //Option winner does not need to pass regular quorum.
    bool allow_multi = 7;                  //Allow multiple choice proposals.
    optional uint32 voting_period = 8;     //How many days in the voting period (Months | Days). (cannot be present with adaptive) | (must be present with cycle & staggered & staged)
    repeated string allowed_proposal_instrument = 9;    
    optional PROPOSAL_PERIOD proposal_period = 10;  //Is the total_period in months or days? months will start the cycle on the start_date, days will start after period ends (must be present with cycle & staggered & staged) | (cannot be present with adaptive) 
    repeated Stage stage_length = 11;              //Determines how many stages in cycle, cannot be more than 28 per month and 99 in total. '0' input will represent remainder of month (can only be used as last entry)
    optional google.protobuf.Timestamp start_timestamp = 12; //Start date of the contract, year-month-day-hour parsed. Needs to be present for staged and cycle
}
message Stage{
    uint32 length = 1;
    PROPOSAL_PERIOD period = 2;
    bool break = 3;
}
message CoinDenomination{
    string denomination_name = 5;
    string amount = 6;
}
message ContractFees{
    string fee = 1;                 //100% && $1.00 = 1000000000000000000 (quintillion)
    optional bytes fee_address = 2; //address of contract holder (or the wallet they want fees to go to)
    string burn = 3;                //percent = 100% = 1000000000000000000 (quintillion)
    string validator = 4;           //percent = 100% = 1000000000000000000 (quintillion)
    repeated string allowed_fee_instrument = 5; //contract_ids that can be used to pay fees
    CONTRACT_FEE_TYPE contract_fee_type = 6;    //read CONTRACT_FEE_TYPE above
}
message ItemContractFees{
    string fee = 1;                  //$1.00 = 1000000000000000000 (quintillion)
    optional bytes fee_address = 2;
    string burn = 3;
    string validator = 4;
    repeated string allowed_fee_instrument = 5;
}
message RestrictedKey{
    PublicKey public_key = 1;
    int64 time_delay = 2;
    bool global = 3;
    bool update_contract = 4;
    bool transfer = 5;
    bool quash = 6;
    bool mint = 7;
    bool vote = 8;
    bool propose = 9;
    bool compliance = 10;
    bool expense_ratio = 11;
    bool cur_equiv = 12;
    bool revoke = 13;
    uint32 key_weight = 14;
}
message ExpenseRatioTXN{
    BaseTXN base = 1;
    string contract_id = 2;
    repeated bytes addresses = 3;
}
message PreMintWallet{
    bytes address = 1;
    string amount = 2;
}
message Transfer{
    bytes recipient_address = 1;
    string amount = 2;
    string contract_id = 3;
    optional string contract_fee_amount = 4;
    optional string contract_fee_id = 5;
    string base_fee_amount = 6;
    string base_fee_id = 7;
    optional string memo = 8;
}
message BurnSBTTXN{
    BaseTXN base = 1;
    string contract_id = 2;
    string item_id = 3;
}
message BaseTXN{
    PublicKey public_key = 1;
    google.protobuf.Timestamp timestamp = 3; 
    string fee_amount = 4;
    string fee_id = 5;
    optional bytes signature = 6;
    optional bytes hash = 7;
    optional string memo = 8;
    optional bool safe_send = 9;
    uint64 nonce = 10;
}
message PublicKey{
    bytes single = 1;
    MultiKey multi = 2;
    optional bytes sc_wallet_adr = 3;
    optional bytes governance_auth = 4;  //
}
message GovernanceAuth
{
    bytes auth = 1;
    bytes proposal_id = 2;
}
message MultiKey{
    repeated bytes public_keys = 1;             //public keys with class prefix ex. c1_"public_key"
    repeated bytes signatures = 2;              //signature of each public key included "empty space if not included"
    repeated MultiPatterns multi_patterns = 3;  //all diiferent patterns of to verify the multi key
    repeated string hash_tokens = 4;            //hash tokens to hash the multi key in wallet address
}
message MultiPatterns{
    repeated int32 class = 1;                   //these are a parrellel array of classes and how many of these classes are required to create a valid multi key
    repeated int32 required = 2;
}
message SelfCurrencyEquiv{
    BaseTXN base = 1;
    repeated CurrencyEquiv cur_equiv = 2;
}
message AuthorizedCurrencyEquiv{
    BaseTXN base = 1;
    repeated CurrencyEquiv cur_equiv = 2;
}
message CurrencyEquiv{
    string contract_id = 1;
    string rate = 2; //1000000000000000000 = $1.00
    optional bool authorized = 3; 
    optional string max_stake = 4; //1000000000000000000 = $1.00
}
message ExpenseRatioResult{
    string contract_id = 1;
    repeated Wallets wallets = 2;
    bytes hash = 3;
    bytes recipient_address = 4;
}
message ComplianceAssign
{
    bytes recipient_address = 1;    //address of the wallet to assign compliance
    uint32 compliance_level = 2;    //compliance level to assign
    bool assign_revoke = 3;         //true to assign compliance, false to revoke
    google.protobuf.Timestamp expiry = 4;
}
message ComplianceTXN{
    BaseTXN base = 1;
    string contract_id = 2;         //contract_id of the contract to assign compliance
    repeated ComplianceAssign compliance = 3;
}
message Wallets{
    bytes address = 1;
    string amount = 2;
}
message QuashTXN{
    BaseTXN base = 1;
    string contract_id = 2;
    bytes txn_hash = 3;
}
message QuashResult{
    bytes txn_hash = 1;
    repeated PublicKey public_keys = 2;
}
message CoinTXN
{
    BaseTXN base = 1;
    string contract_id = 2;
    TransferAuthentication auth = 3;
    repeated InputTransfers input_transfers = 4;
    repeated OutputTransfers output_transfers = 5;
    optional string contract_fee_id = 6;
    optional string contract_fee_amount = 7;
}
message TransferAuthentication
{
    repeated PublicKey public_key = 1;
    repeated bytes signature = 2;
    repeated uint64 nonce = 3;
}
message InputTransfers
{
    uint64 index = 1;
    string amount = 2;
    uint32 fee_percent = 3;                     // 100 000 000 = 100%
    optional uint32 contract_fee_percent = 4;   // 100 000 000 = 100%
}
message OutputTransfers
{
    bytes wallet_address = 1;
    string amount = 2;
    optional string memo = 3;
}
message MintTXN{
    BaseTXN base = 1;
    string contract_id = 2;
    string amount = 3;
    bytes recipient_address = 4;
} 
message NFTTXN{
    BaseTXN base = 1;
    string contract_id = 2;
    string item_id = 3;
    bytes recipient_address = 4; 
    optional string contract_fee_amount = 5;
    optional string contract_fee_id = 6;
}
message ItemizedMintTXN{
    BaseTXN base = 1;
    string contract_id = 2;
    string item_id = 3;
    bytes recipient_address = 4; 
    optional string voting_weight = 5;
    repeated KeyValuePair parameters = 6; 
    optional uint64 expiry = 7; 
    optional ItemContractFees contract_fees = 8; //contract fees for specific item
    optional uint64 valid_from = 9;
}
message ContractUpdateTXN{
    BaseTXN base = 1;
    string contract_id = 2;
    uint64 contract_version = 3;
    optional string name = 4;
    optional Governance governance = 5;
    repeated RestrictedKey restricted_keys = 6;
    optional ContractFees contract_fees = 7;
    repeated KeyValuePair custom_parameters = 8; 
    repeated ExpenseRatio expense_ratio = 9;
    repeated TokenCompliance token_compliance = 10;
    optional bool kyc_status = 11;                               //does contract require kyc?
    optional bool immutable_kyc_status = 12;
    optional uint32 quash_threshold = 13; 
}
message InstrumentContract{
    BaseTXN base = 1; 
    uint64 contract_version = 2;
    string symbol = 3; 
    string name = 4;
    optional Governance governance = 5;
    repeated RestrictedKey restricted_keys = 6;
    optional string max_supply = 7;
    optional ContractFees contract_fees = 8;
    repeated PreMintWallet premint_wallets = 9;
    optional CoinDenomination coin_denomination = 10;
    repeated KeyValuePair custom_parameters = 11; 
    string contract_id = 12; 
    repeated ExpenseRatio expense_ratio = 13;
    CONTRACT_TYPE type = 14;
    bool update_contract_fees = 15;
    bool update_expense_ratio = 16;
    optional uint32 quash_threshold = 17;           //total number of quash txns to quash a time delay txn
    repeated TokenCompliance token_compliance = 18; //Compliance levels for each token that are manditory to transact with this contract
    bool kyc_status = 19;
    bool immutable_kyc_status = 20;
    optional string cur_equiv_start = 21;
}
message GovernanceVote{
    BaseTXN base = 1;
    string contract_id = 2;
    bytes proposal_id = 3;
    optional bool support = 4;
    optional uint32 support_option = 5;
}
message GovernanceProposal{
    BaseTXN base = 1;
    string contract_id = 2;
    string title = 3;
    string synopsis = 4;
    string body = 5;
    repeated string options = 6;
    optional google.protobuf.Timestamp start_timestamp = 7;
    optional google.protobuf.Timestamp end_timestamp = 8;
    repeated GovernanceTXN governance_txn = 9;
}
message GovernanceTXN{
    TRANSACTION_TYPE txn_type = 1;
    bytes serialized_txn = 2;
    bytes txn_hash = 3;

}
message SmartContractTXN{
    BaseTXN base = 1;
    string smart_contract_name = 4;
    bytes binary_code = 2;
    bytes source_code = 7;
    LANGUAGE language = 3;
    repeated string functions = 5;
    repeated string dependencies = 6;
}
message SmartContractExecuteTXN{
    BaseTXN base = 1;
    string smart_contract_name = 2;
    uint32 nonce = 3;
    string function = 74;
    repeated bytes parameters = 4; 
    repeated string parameters_types = 5; 
}
message SmartContractInstantiateTXN{
    BaseTXN base = 1;
    string smart_contract_name = 2;
    uint32 nonce = 3;
}
//key = generated public key
message Validator{
    PublicKey public_key = 1;  //original public key
    string host = 2;
    string client_port = 3; 
    string validator_port = 4; 
    repeated string staked_contract_ids = 5;
    uint64 benchmark = 6;
    google.protobuf.Timestamp timestamp = 7;
    bool lite = 8;
    bool online = 9;
    uint32 version = 10;
    uint64 last_heartbeat = 11;
}
message ValidatorRegistration{
    BaseTXN base = 1;
    Validator validator = 2;
    bool register = 3;
    PublicKey generated_public_key = 4;
    bytes generated_signature = 5;      //signature of the generated public key (signing txn hash)
}
message ValidatorHeartbeat{
    BaseTXN base = 1;
    bool online = 2;
    uint32 version = 3;
}
message SmartContractParameter{
    uint32 index = 1;
    VARIABLE_TYPE type = 2;
    optional string value = 3;
}
message Votes{
    repeated VotePair votes = 1;
}
message VotePair{
    string contract_id = 1;
    string amount = 2;
}
message RequiredVersion{
    BaseTXN base = 1;
    repeated uint32 version = 2;
}
message ProposalResult{
    BaseTXN base = 1;
    string contract_id = 2;     //contract_id of the proposal
    bytes proposal_id = 3;      //proposal_id of the proposal
    optional string support_cur_equiv = 4; //cur_equiv of all the support votes (multiple contract_ids)
    optional string against_cur_equiv = 5; //cur_equiv of all the against votes (multiple contract_ids)
    repeated string option_cur_equiv = 6;  //cur_equiv of all the option votes (multiple contract_ids)
    optional Votes support_votes = 7;   //raw support votes of each contract_id
    optional Votes against_votes = 8;   //raw against votes of each contract_id
    repeated Votes option_votes = 9;    //raw option votes of each contract_id
    bool passed = 10;
    bool final_stage = 11;
    uint32 stage = 12;
    bool fast_quorum = 13;
}
message TXNS{
    repeated CoinTXN coin_txns = 1;
    repeated MintTXN mint_txns = 2;
    repeated ItemizedMintTXN item_mint_txns = 3;
    repeated InstrumentContract contract_txns = 4;
    repeated GovernanceVote governance_votes = 5;
    repeated GovernanceProposal governance_proposals = 6;
    repeated SmartContractTXN smart_contracts = 7;
    repeated SmartContractExecuteTXN smart_contract_executes = 8;
    repeated SelfCurrencyEquiv self_cur_equivs = 9;
    repeated AuthorizedCurrencyEquiv auth_cur_equivs = 10;
    repeated ExpenseRatioTXN expense_ratios = 11;
    repeated TXNStatusFees txn_fees_and_status = 12;
    repeated TokenFees token_fees = 13;
    repeated NFTTXN nft_txns = 14;
    repeated ContractUpdateTXN contract_update_txns = 15;
    repeated ValidatorRegistration validator_registration_txns = 16;
    repeated ValidatorHeartbeat validator_heartbeat_txns = 17;
    repeated ProposalResult proposal_result_txns = 18; //
    repeated ExpenseRatioResult expense_ratio_result_txns = 19;
    repeated FoundationTXN foundation_txns = 20;
    repeated DelegatedVotingTXN delegated_voting_txns = 21;
    repeated QuashTXN quash_txns = 22;
    repeated FastQuorumTXN fast_quorum_txns = 23;
    repeated QuashResult quash_results = 24;
    repeated RevokeTXN revoke_txns = 25;
    repeated ComplianceTXN compliance_txns = 26;
    repeated BurnSBTTXN burn_sbt_txns = 27;
    repeated SmartContractInstantiateTXN smart_contract_instantiate_txns = 28;
    optional RequiredVersion required_version_txn = 29;
}

message Token{
    string contract_id = 1;
    string amount = 2;
}
message TokenFees{
    bytes address = 1;
    repeated Token tokens = 2;
}

message TXNStatusFees{
    bytes txn_hash = 1;
    TXN_STATUS status = 2;
    string base_fees = 3;
    string base_contract_id = 4;
    optional string contract_fees = 5;
    optional string contract_contract_id = 6;
    bool smart_contract = 9;
    repeated bytes smart_contract_result = 10;
    repeated string misc = 11;
}

message TXNWrapper{
    oneof payload{
        CoinTXN coin_txn = 1;
        MintTXN mint_txn = 2;
        ItemizedMintTXN item_mint_txn = 3;
        InstrumentContract contract_txn = 4;
        GovernanceVote governance_vote = 5;
        GovernanceProposal governance_proposal = 6;
        SmartContractTXN smart_contract = 7;
        SmartContractExecuteTXN smart_contract_execute = 8;
        SelfCurrencyEquiv self_cur_equivs = 9;
        AuthorizedCurrencyEquiv auth_cur_equivs = 10;
        ExpenseRatioTXN expense_ratios = 11;
        NFTTXN nft_txn = 12;
        ContractUpdateTXN contract_update_txn = 13;
        ValidatorRegistration validator_registration_txn = 14;
        ValidatorHeartbeat validator_heartbeat_txn = 15;
        FoundationTXN foundation_txn = 16;
        DelegatedVotingTXN delegated_voting_txn = 17;
        QuashTXN quash_txn = 18;
        FastQuorumTXN fast_quorum_txn = 19;
        RevokeTXN revoke_txn = 20;
        ComplianceTXN compliance_txn = 21;
        bool proposal_result_txn = 22;
        BurnSBTTXN burn_sbt_txn = 23;
        RequiredVersion required_version_txn = 24;
        SmartContractInstantiateTXN smart_contract_instantiate_txn = 25;
    }
    
    TRANSACTION_TYPE txn_type = 26;
    repeated bytes proposal_ids = 27;
    repeated bytes proposal_contracts = 28;
}